# All of these fields are optional, as is this file itself,
#   in which case these values can be managed in the UI.

# The name of the stage.
project_name: "Crunchatize"

# A short tagline to show in search.
tagline: "Turn any chat into a simple, stat-driven RPG."

creator_notes: "
Can't enjoy an organic role-playing narrative without the thrill of the meta?<br>
Wondering why you're enduring some meaningless simulacrum of our equally meaningless reality when you could be gaming?<br>
Worried you'll develop genuine feelings or exercise life-changing introspection if numbers and probabilities aren't artificially injected into your every experience?<br>
Crunchatize may be the stage for you!<br>
<br>
**What's it do?**<br>
Adding this stage to a chat (from Chat Settings) will cause your every input to be distilled into a skill check against one of eight attributes. 
Dice will be rolled and modifiers added to determine whether you succeed or fail.
<br><br>
<img src=\"https://avatars.charhub.io/avatars/uploads/images/gallery/file/7564e258-4f34-4ebd-97d9-402ef0508c21/685eece8-d6c7-4a6a-8457-809c01040a11.png\" alt=\"Example Screenshot\" style=\"display: block; margin: auto; width: 40%; height: auto; max-width: 938px;\"/>
<br><br>
Unlike most chats, where you don't want the bot to speak or act for your character, 
this stage asks you to forfeit some agency over the details of your actions; 
the bot will be specifically instructed to take your skill check result and paraphrase your choices as it narrates, rather than accept your input as canon. 
As a result, you may find that you are better off simply describing the nature or attitude of the action you intend to take and allowing the bot to fill in the details.
<br><br>
The stage is vaguely inspired by \"Powered by the Apocalypse\" rules, where 2d6 are rolled and modifiers added or subtracted to arrive at 
one of four degrees of success: failure, mixed success, straight success, and critical success. Failures and criticals grant experience, which slowly leads to a level up--increasing one of the stats you used 
most during that level. And that's about it!
<br><br>
There are eight stats, and they are all a bit nebulous and overlapping:<br>
<ul>
<li>Might - Strength and endurance<br>
<li>Grace - Agility and composure<br>
<li>Skill - Craft and deftness<br>
<li>Brains - Knowledge and logic<br>
<li>Wits - Instinct and awareness<br>
<li>Charm - Allure and influence<br>
<li>Heart - Determination and empathy<br>
<li>Luck - Chance and fortune<br>
</ul>
<br>
You can view console output to see the classification results that the stage is using to arrive at its skill and difficulty assessments. 
These are zero-shot classifications, which are pretty naive and lack significant context; I am continuing to tweak and improve, 
but it is pretty easy to skew the results through the language you use in your input.
<br><br>
I've tagged the stage NSFW, but there isn't anything in the stage that would render a wholesome chat inappropriate. However, my example bot is NSFW, and I'm sure other bots that attach this stage could be, too.
<br><br>
**Updates:**<br>
04/28/2025 - I'm making updates to try to get this working for multiplayer chats. Hopefully not breaking everything. Made some small revisions to stat determination, as well.<br>
03/30/2025 - Updated the HF backend this stage leverages and had to update the Gradio client here. I broke inference for several hours but it's back up and should perform better than before. I might toy with other models, but I'm pretty happy with the performance boost for now.<br>
03/17/2025 - Allowing the stage to attempt to reconnect to the backend when something goes wrong, instead of falling back to the local model long-term. Minor visual update and made some changes to the stat classifier to hopefully get better results.<br>
11/23/2024 - Sped things up a bit by kicking off both assessments instead of waiting for one before starting the other.<br>
11/03/2024 - Updating some dependencies; nothing exciting.<br>
08/29/2024 - The backend model has changed, and the prompts in the stage have been updated; I think the results have improved, 
but I'm continuing to toy with the backend as I work on my next stage, which leverages the same endpoints.<br>
08/27/2024 - Improved stage loading to no longer rely on loading the local model straight away. 
I am doing some experimentation with the backend, so this stage may have to resort to the local model more frequently. 
Hopefully, these experiments bear fruit, and I can improve the inferences for this stage, but in the interim, the stage may be a little less stable as it falls back to local inference.<br>
08/16/2024 - Made critical successes also grant an XP point, the same as failures do, just so they feel extra good.<br>
08/15/2024 - Added critical successes; when you roll double sixes, the bot is given instructions to make your success a little over-the-top. Also color-coded some outcome stuff for fun.<br>
08/14/2024 - Partially swapped the inference calls to a hosted model that is a larger size. 
"

# 'PUBLIC', 'PRIVATE', or 'UNLISTED'.
visibility: 'PUBLIC'

# 'ADJACENT' | 'NONE' | 'COVER' | 'FULLSCREEN'
# 'ADJACENT' is default. The frame will display on the side of the
#   chat on desktop and above/in the top half of the chat on mobile.
# 'NONE' will not display, only run.
# 'COVER' will, indeed, cover the chat history completely,
#   but leave the text input box.
# 'FULLSCREEN' will make nothing below the header bar
#   show except for your stage.
position: 'NONE'

# Self-explanatory.
tags:
  - 'NSFW'
  - 'Stage'
  - 'Extension'
  - 'Add-on'
  - 'RPG'
  - 'Stats'

needs_config:
  false

config_schema:
  title: Crunchatize Configuration
  type: object
  properties:
    debugMode:
      label: Debug Mode
      type: boolean
      default: false

# The schema of the state that you store.
# This isn't needed even if you do store state,
#   and is here more for future use cases to
#   optimize storage.
state_schema:
  init:
    type: object
    properties:
      grid:
        type: string
  message:
    type: object
    properties:
      angry:
        type: boolean
        default: true
  chat:
    type: object
    properties:
      visited:
        type: array
        items:
          type: integer

# Whether to publish as 'Anonymous' instead of under your username.
# is_anonymous: false

# Self-explanatory.
# ratings_disabled: false

# This is here for future cases where ex. you need user secrets,
#    but currently does nothing.
# permissions:

# extension_id is automatically generated on push with a new project;
#    you should not make or set this value.
# github_path will be added if it does not exist. It is the URL of the repo.


github_path: 'https://github.com/Lord-Raven/Crunchatize'


extension_id: 'crunchatize-77a78ffcc6a6'

